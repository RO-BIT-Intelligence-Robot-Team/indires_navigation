#-----GENERAL PARAMS FOR UPO_NAVIGATION -------------------------
base_global_planner: global_rrt_planner/GlobalRRTPlanner
base_local_planner: local_3d_planner/Local3DPlannerROS  #base_local_planner/TrajectoryPlannerROS 
#recovery_behaviors: [{
#    name: conservative_reset, 
#    type: clear_costmap_recovery/ClearCostmapRecovery
#  }, {
#    name: aggressive_reset,
#    type: clear_costmap_recovery/ClearCostmapRecovery
#  }, {
#    name: rotate_recovery1,
#    type: rotate_recovery/RotateRecovery
#  }, {
#    name: rotate_recovery2,
#    type: rotate_recovery/RotateRecovery
#  }]

planner_frequency:          0.0 #5 #def:0
controller_frequency:       10.0 #15.0
planner_patience:           15.0
controller_patience:        10.0
conservative_reset_dist:    4.0
recovery_behavior_enabled:  false
clearing_rotation_allowed:  false
shutdown_costmaps:          false
oscillation_timeout:        0.0
oscillation_distance:       0.5
global_costmap/robot_base_frame:  indires_rover/base_link
global_costmap/global_frame:      indires_rover/odom

# parameters added to use costmaps or not
use_global_costmap2d:       false
use_local_costmap2d:        false





#------ GLOBAL PLANNER PARAMS -------------------------------------
# http://www.ros.org/wiki/navfn
#NavfnROS:

#  allow_unknown:                      false
#  planner_window_x:                   0.0
#  planner_window_y:                   0.0
#  default_tolerance:                  0.05
#  visualize_potential:                true  
#  planner_costmap_publish_frequency:  1.0
#  use_dijkstra:                       false 
#  old_navfn_behavior:                 false


#TrajectoryPlannerROS:

#  holonomic_robot: false 





#---- RRT PLANNER PARAMS ------------------------------------
RRT_ros_wrapper:

  # RRT planner to use
  # 1 -> RRT (no kinodynamics)
  # 2 -> RRTstar (no kinodynamics)
  # 3 -> Q-RRTstar (no kinodynamics)
  # 4 -> Kinodynamic RRT
  # 5 -> Kinodynamic RRTstar 
  # 6 -> Kinodynamic simplified RRTstar
  rrt_planner_type:           2 
  rrt_solve_time:             5.0 
  rrt_goal_bias:              0.07 #0.06 #0.05 
  rrt_max_insertion_dist:     0.25 #0.60<-3 0.25<-2  0.50 o 1.0<-4
  rrt_goal_xyz_tol:           0.25 #0.12
  rrt_goal_th_tol:            0.12
  # If we want to interpolate the resulting path
  # if we don't. This value should be 0 or below 0.
  rrt_interpolate_path_dist:  0.1

  #Only in case of using Quick-RRTstar
  quick_rrt_depth:            1

  # path smoothing
  path_smoothing:             true
  smoothing_samples:          5

  #if the planner is RRT* 
  rrtstar_use_k_nearest:      false
  
  # use a downsampled point cloud without ceiling and walls
  use_external_pc_as_samples: true
  pc_topic:                   pcl_filters_node_1/rrt_pointcloud_samples  #pcl_filters_node_2/features_pointcloud
  
  features_name:              navigation_features_3d

  planning_frame:             indires_rover/odom
  robot_base_frame:           indires_rover/base_link
  robot_odom_frame:           indires_rover/odom
  robot_pc_sensor_frame:      indires_rover/front_rgbd_camera/depth_optical_frame


  #if the planner is kinodynamic (options 3 and 4)
  kino_time_step:             0.20 #0.15 
  kino_min_control_steps:     5  #not used currently
  kino_max_control_steps:     10 #3    
  kino_linear_acc:            1.0
  kino_angular_acc:           1.0
  # 1-> POSQ
  # 2-> i-POSQ
  kino_steering_type:         2
  # Steering parameters
  kino_steer_kp:              0.5 #0.4  #max_lin_vel
  kino_steer_kv:              3.0
  kino_steer_ka:              2.0  #max_ang_vel*4
  kino_steer_ko:              0.25 #ka/8.0

  # State Space
  # dim=2-> x, y
  # dim=3-> x, y, yaw
  rrt_dimensions:             3
  # if dimensions = 3
  # type 1 - x, y, th
  # type 2 - x, y, z
  dimensions_type:            2

  # 1-> dist (no sqrt)
  # 2-> euclidean dist
  # 3-> dist+quaternions_diff
  # 4-> custom (dist+alpha)
  # 5-> custom (w1*dist+w2*(alpha+beta))
  # 6-> distanceFunction Park's paper IROS'15
  distance_type:              1  

  # 1-> avg_cost
  # 2-> avg_cost * euclidean_dist
  # 3-> avg_cost * exp(euc_dist)
  # 4-> cost sum
  # 5-> avg_cost * (dist+alpha)
  # For 3 dimensions:
  # 6-> avg_cost * (dist+sum of angles regarding the intersection line)
  # 7-> avg_cost * distanceFunction of Park's paper IROS'15
  motion_cost_type:           2

  rrt_size_x:                 5.0
  rrt_size_y:                 5.0
  rrt_size_z:                 5.0
  rrt_xyz_resolution:         0.1 #0.05
  rrt_yaw_resolution:         0.02
  rrt_min_linear_vel:         0.0
  rrt_max_linear_vel:         0.5 #0.4
  rrt_max_angular_vel:        1.0 #0.8
  rrt_lin_vel_resolution:     0.05
  rrt_ang_vel_resolution:     0.1
  rrt_nn_type:                1

  # Visualization
  visualize_rrt_tree:         true
  visualize_nav_costmap:      false
  show_rrt_statistics:        true
  show_intermediate_states:   false #use only in case of kino

  robot_radius:               0.40  #meters



#---- PARAMS FOR FEATURES CALCULATION-------------------------
navigation_features_3d:

  pointcloud_topic:           pcl_filters_node_2/features_pointcloud #point_map #indires_rover/front_rgbd_camera/front_rgbd_camera/depth/points #pcl_filters_node/PointCloud_filtered 

  robot_circuns_radius:       0.40
  max_pitch_inclination:      0.8  #0.79 rad = 45º   0.87 = 50ª
  max_roll_inclination:       0.8
  max_roughness:              0.8 #0.15 #0.8
  min_points_allowed:         12 #18 #20

  robot_base_frame:           indires_rover/base_link
  robot_odom_frame:           indires_rover/odom
  robot_odom_topic:           indires_rover/odom_filtered  #icp_odom
  
  feature_set:                2
  
  #feature set 1 = {valid, pitch, roll, roughness}
  #w1:                         0.4   #pitch
  #w2:                         0.4  #roll
  #w3:                         0.2   #roughness 
  
  # Weights for function costs 
  # feature set 2[8] = {valid, pitch, roll, roughness, point_dist, stddev, num_points, goal_dist} //curvature
  # the weight for the valid features is directly initialized with value 1.0
  #1/7 = 0.14285
                              # pitch
  w1:                         0.1 
                              # roll
  w2:                         0.1
                              # roughness  
  w3:                         0.1  
                              # point_dist
  w4:                         0.175   
                              # stddev
  w5:                         0.175 
                              # num_points 
  w6:                         0.175  
                              # goal_dist
  w7:                         0.175
  
  #EXPLORATION
  exp_pc_service_name:        pcl_filters_node_4/get_filtered_pc

  visited_region_enabled:     true
  remove_wall_frontier_enabled: true
  variable_size_enabled:      true

  # if NFE and BFE are false, CFE is used (Cost Function Exploration)
  nf_exploration:             false
  bf_exploration:             false
  threshold_frontier:         0.4   #best=0.4  high=0.65
  adaptative_threshold:       true

  num_points_saturation:      3200.0
#  numpoint_cost_limit:        0.62
  percentage_limit:           0.85

  min_planning_size:          5.0
  max_planning_size:          13.0
  cell_size_grid_exp:         0.07

  #Weights for the exploration cost function
                              # num_points
  wexp1:                      0.39    
                              # no return   
  wexp2:                      0.305    
                              # rrt path cost
  wexp3:                      0.305
                              # goal cost
#  wexp4:                      0.2

  exp_min_dist_goals:         1.5

  visualize_visited_reg:      true
  visualize_frontiers:        true
  visualize_wall_leaves:      true
   

  

#------------------------------------------------------------
# Parameters for the PATH FOLLOWING CONTROLLER
Local3DPlannerROS:

# Robot Configuration Parameters
  max_trans_acc:              1.5
  max_rot_acc:                1.5
  max_trans_vel:              0.4 
  min_trans_vel:              0.1
  max_rot_vel:                0.6
  min_rot_vel:                0.1
  min_in_place_rot_vel:       0.4

# Goal Tolerance Parameters
  yaw_goal_tolerance:         0.15 #0.1
  xyz_goal_tolerance:         0.25 #0.13
  wp_tolerance:               0.3
  
# Forward Simulation Parameters
  sim_time:                   0.5 
  sim_granularity:            0.025
  angular_sim_granularity:    0.025

  controller_freq:            10.0 #15.0

  dwa:                        true

  robot_radius:               0.42
  local_area_radius:          1.5 #1.2
 
  odometry_topic:             indires_rover/odom_filtered
  base_frame:                 indires_rover/base_link
  global_frame:               indires_rover/odom


  # if a laser range finder is employed
  use_laser:                  false
  laser_topic:                scan

  sensor_uncertainty:         0.05

# if range sonars are employed, indicate the topic names.
# The frame for each sonar must be properly integrated in the TF tree 
  use_range:                  false
  range_topic_0:              range_1  #range_0              
  range_topic_1:              range_2  #range_1
  range_topic_2:              range_3  #range_2
  range_topic_3:              range_4  #range_3
  range_topic_4:              range_5  #range_4
  range_topic_5:              range_6  #range_5
  range_topic_6:              range_7  #range_6
#  range_topic_7:              range_7


  #The local3DPlanner uses its own navigation_features_3d
  features_name:              local_features_3d


#this name must be equals to features_name
local_features_3d:

  pointcloud_topic:           pcl_filters_node_3/local_control_pointcloud #pcl_filters_node_2/features_pointcloud  #pcl_filters_node_3/local_control_pointcloud  
  robot_circuns_radius:       0.40
  max_pitch_inclination:      1.57  #0.85   #0.79 rad = 45º   0.87 = 50ª
  max_roll_inclination:       1.57  #0.85     
  max_roughness:              5.0  #0.15 #0.8
  min_points_allowed:         15   #20

  robot_base_frame:           indires_rover/base_link
  robot_odom_frame:           indires_rover/odom
  robot_odom_topic:           indires_rover/odom_filtered  

  
